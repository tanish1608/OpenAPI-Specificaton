openapi: 3.0.0
info:
  title: Swagger Petstore - OpenAPI 3.0
  version: '1.2'
servers:
- url: '{{baseUrl}}'
tags:
- name: pet
  description: Operations related to pet
- name: store
  description: Operations related to store
- name: user
  description: Operations related to user
paths:
  /pet:
    put:
      summary: Update an existing pet
      tags:
      - pet
      description: 'diytfuduytifyitykckyiytkckytd

        nladfhsd.b '
      parameters: []
      responses:
        '200':
          description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 10
                name: doggie
                category:
                  id: 1
                  name: Dogs
                photoUrls:
                - thunder
                tags:
                - id: 2
                  name: thunder
                status: available
    post:
      summary: Add a new pet to the store
      tags:
      - pet
      description: No description provided
      parameters: []
      responses:
        '200':
          description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 10
                name: doggie
                category:
                  id: 1
                  name: Dogs
                photoUrls:
                - thunder
                tags:
                - id: 65
                  name: thunder
                status: available
  /pet/findByStatus:
    get:
      summary: Finds Pets by status
      tags:
      - pet
      description: No description provided
      parameters:
      - name: status
        in: query
        required: false
        description: No description provided
        schema:
          type: string
      responses:
        '200':
          description: ''
  /pet/findByTags:
    get:
      summary: Finds Pets by tags
      tags:
      - pet
      description: No description provided
      parameters:
      - name: tags
        in: query
        required: false
        description: No description provided
        schema:
          type: string
      responses:
        '200':
          description: ''
  /pet/{petId}:
    get:
      summary: Find pet by ID
      tags:
      - pet
      description: No description provided
      parameters:
      - name: petId
        in: path
        required: true
        description: No description provided
        schema:
          type: string
      responses:
        '200':
          description: ''
    post:
      summary: Updates a pet in the store with form data
      tags:
      - pet
      description: No description provided
      parameters:
      - name: petId
        in: path
        required: true
        description: No description provided
        schema:
          type: string
      - name: name
        in: query
        required: false
        description: No description provided
        schema:
          type: string
      - name: status
        in: query
        required: false
        description: No description provided
        schema:
          type: string
      responses:
        '200':
          description: ''
    delete:
      summary: Deletes a pet
      tags:
      - pet
      description: No description provided
      parameters:
      - name: petId
        in: path
        required: true
        description: No description provided
        schema:
          type: string
      responses:
        '200':
          description: ''
  /pet/{petId}/uploadImage:
    post:
      summary: uploads an image
      tags:
      - pet
      description: No description provided
      parameters:
      - name: petId
        in: path
        required: true
        description: No description provided
        schema:
          type: string
      - name: additionalMetadata
        in: query
        required: false
        description: No description provided
        schema:
          type: string
      responses:
        '200':
          description: ''
  /store/inventory:
    get:
      summary: Returns pet inventories by status
      tags:
      - store
      description: No description provided
      parameters: []
      responses:
        '200':
          description: ''
  /store/order:
    post:
      summary: Place an order for a pet
      tags:
      - store
      description: No description provided
      parameters: []
      responses:
        '200':
          description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 10
                petId: 198772
                quantity: 7
                shipDate: '2024-08-07T12:57:35.471Z'
                status: approved
                complete: true
  /store/order/{orderId}:
    get:
      summary: Find purchase order by ID
      tags:
      - store
      description: No description provided
      parameters:
      - name: orderId
        in: path
        required: true
        description: No description provided
        schema:
          type: string
      responses:
        '200':
          description: ''
    delete:
      summary: Delete purchase order by ID
      tags:
      - store
      description: No description provided
      parameters:
      - name: orderId
        in: path
        required: true
        description: No description provided
        schema:
          type: string
      responses:
        '200':
          description: ''
  /user:
    post:
      summary: Create user
      tags:
      - user
      description: No description provided
      parameters: []
      responses:
        '200':
          description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 10
                username: theUser
                firstName: John
                lastName: James
                email: john@email.com
                password: '12345'
                phone: '12345'
                userStatus: 1
  /user/createWithList:
    post:
      summary: Creates list of users with given input array
      tags:
      - user
      description: No description provided
      parameters: []
      responses:
        '200':
          description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
              - id: 10
                username: theUser
                firstName: John
                lastName: James
                email: john@email.com
                password: '12345'
                phone: '12345'
                userStatus: 1
  /user/login:
    get:
      summary: Logs user into the system
      tags:
      - user
      description: No description provided
      parameters:
      - name: username
        in: query
        required: false
        description: No description provided
        schema:
          type: string
      - name: password
        in: query
        required: false
        description: No description provided
        schema:
          type: string
      responses:
        '200':
          description: ''
  /user/logout:
    get:
      summary: Logs out current logged in user session
      tags:
      - user
      description: No description provided
      parameters: []
      responses:
        '200':
          description: ''
  /user/{username}:
    get:
      summary: Get user by user name
      tags:
      - user
      description: No description provided
      parameters:
      - name: username
        in: path
        required: true
        description: No description provided
        schema:
          type: string
      responses:
        '200':
          description: ''
    put:
      summary: Update user
      tags:
      - user
      description: No description provided
      parameters:
      - name: username
        in: path
        required: true
        description: No description provided
        schema:
          type: string
      responses:
        '200':
          description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 10
                username: theUser
                firstName: John
                lastName: James
                email: john@email.com
                password: '12345'
                phone: '12345'
                userStatus: 1
    delete:
      summary: Delete user
      tags:
      - user
      description: No description provided
      parameters:
      - name: username
        in: path
        required: true
        description: No description provided
        schema:
          type: string
      responses:
        '200':
          description: ''
components:
  schemas: {}
